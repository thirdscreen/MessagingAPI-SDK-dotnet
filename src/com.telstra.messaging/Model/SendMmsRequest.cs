/* 
 * Telstra Messaging API
 *
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.telstra.messaging.Client.SwaggerDateConverter;
using com.telstra.messaging.Serialization;

namespace com.telstra.messaging.Model
{
    /// <summary>
    /// SendMmsRequest
    /// </summary>
    [DataContract]
    public partial class SendMmsRequest :  IEquatable<SendMmsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMmsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendMmsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMmsRequest" /> class.
        /// </summary>
        /// <param name="From">This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored. (required).</param>
        /// <param name="To">This is the destination address. (required).</param>
        /// <param name="Subject">The subject that will be used in an MMS message. (required).</param>
        /// <param name="ReplyRequest">If set to true, the reply message functionality will be implemented and the to address will be ignored if present. (required).</param>
        /// <param name="MMSContent">An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS. (required).</param>
        public SendMmsRequest(string From = default(string), string To = default(string), string Subject = default(string), bool? ReplyRequest = default(bool?), List<MMSContent> MMSContent = default(List<MMSContent>))
        {
            // to ensure "From" is required (not null)
            if (From == null)
            {
                throw new InvalidDataException("From is a required property for SendMmsRequest and cannot be null");
            }
            else
            {
                this.From = From;
            }
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for SendMmsRequest and cannot be null");
            }
            else
            {
                this.To = To;
            }
            // to ensure "Subject" is required (not null)
            if (Subject == null)
            {
                throw new InvalidDataException("Subject is a required property for SendMmsRequest and cannot be null");
            }
            else
            {
                this.Subject = Subject;
            }
            // to ensure "ReplyRequest" is required (not null)
            if (ReplyRequest == null)
            {
                throw new InvalidDataException("ReplyRequest is a required property for SendMmsRequest and cannot be null");
            }
            else
            {
                this.ReplyRequest = ReplyRequest;
            }
            // to ensure "MMSContent" is required (not null)
            if (MMSContent == null)
            {
                throw new InvalidDataException("MMSContent is a required property for SendMmsRequest and cannot be null");
            }
            else
            {
                this.MMSContent = MMSContent;
            }
        }
        
        /// <summary>
        /// This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.
        /// </summary>
        /// <value>This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// This is the destination address.
        /// </summary>
        /// <value>This is the destination address.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The subject that will be used in an MMS message.
        /// </summary>
        /// <value>The subject that will be used in an MMS message.</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        [JsonConverter(typeof(XmlEncodingSerializer))]
        public string Subject { get; set; }

        /// <summary>
        /// If set to true, the reply message functionality will be implemented and the to address will be ignored if present.
        /// </summary>
        /// <value>If set to true, the reply message functionality will be implemented and the to address will be ignored if present.</value>
        [DataMember(Name="replyRequest", EmitDefaultValue=false)]
        public bool? ReplyRequest { get; set; }

        /// <summary>
        /// An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.
        /// </summary>
        /// <value>An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.</value>
        [DataMember(Name="MMSContent", EmitDefaultValue=false)]
        public List<MMSContent> MMSContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMmsRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ReplyRequest: ").Append(ReplyRequest).Append("\n");
            sb.Append("  MMSContent: ").Append(MMSContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendMmsRequest);
        }

        /// <summary>
        /// Returns true if SendMmsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendMmsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMmsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.ReplyRequest == input.ReplyRequest ||
                    (this.ReplyRequest != null &&
                    this.ReplyRequest.Equals(input.ReplyRequest))
                ) && 
                (
                    this.MMSContent == input.MMSContent ||
                    this.MMSContent != null &&
                    this.MMSContent.SequenceEqual(input.MMSContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.ReplyRequest != null)
                    hashCode = hashCode * 59 + this.ReplyRequest.GetHashCode();
                if (this.MMSContent != null)
                    hashCode = hashCode * 59 + this.MMSContent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
